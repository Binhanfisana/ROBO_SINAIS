import asyncio
import time
from solana.rpc.api import Client
from solders.pubkey import Pubkey as PublicKey
import requests
import numpy as np
import talib
from base58 import b58decode
from telegram import Bot
import matplotlib.pyplot as plt
import io
import os
import ccxt
from dotenv import load_dotenv 

load_dotenv() #caregar variaveis

# ========== CONFIGURA√á√ïES ==========
wallet_address = "CiYJqkSdUpPcU6MWgZtEWkmVLxoorBMvpx5wCZXpwT2E"  # Endere√ßo da sua carteira
TOKEN_TELEGRAM = os.getenv("TELEGRAM_TOKEN") 
CHAT_ID = os.getenv("CHAT_ID")                                           
BINANCE_SYMBOL = "SOL/USDT"                                          # Par SOL/USDT
API_KEY = "SUA_API_KEY"                                              # API Key da Binance
API_SECRET = "SUA_SECRET_KEY"                                        # Secret Key da Binance
QUANTIDADE_OPERAR = 0.1                                              # Quantidade de SOL para operar
# ====================================

# --- Parte 1: Conex√£o com Solana e verifica√ß√£o de saldo ---
def validar_chave(wallet_address):
    try:
        decoded_address = b58decode(wallet_address)
        if len(decoded_address) != 32:
            raise ValueError("Endere√ßo inv√°lido! Deve ter 32 bytes.")
        return PublicKey(decoded_address)
    except Exception as e:
        print(f"Erro ao validar chave p√∫blica: {e}")
        return None

solana_client = Client("https://api.mainnet-beta.solana.com")

def verificar_saldo(wallet):
    try:
        public_key = validar_chave(wallet)
        if not public_key:
            return None
        saldo = solana_client.get_balance(public_key).value / 1e9
        print(f"Saldo da carteira: {saldo} SOL")
        return saldo
    except Exception as e:
        print(f"Erro ao verificar saldo: {e}")
        return None

# --- Parte 2: Obten√ß√£o do pre√ßo em tempo real via ccxt ---
def obter_preco_em_tempo_real():
    try:
        exchange = ccxt.binance()
        ticker = exchange.fetch_ticker(BINANCE_SYMBOL)
        return ticker['last']
    except Exception as e:
        print(f"Erro ao obter pre√ßo: {e}")
        return None

# --- Parte 3: Obten√ß√£o de dados hist√≥ricos em tempo real ---
def obter_dados_historicos():
    try:
        exchange = ccxt.binance()
        ohlcv = exchange.fetch_ohlcv(BINANCE_SYMBOL, timeframe="1h", limit=100)
        precos = [candle[4] for candle in ohlcv]  # Pre√ßos de fechamento
        return np.array(precos)
    except Exception as e:
        print(f"Erro ao obter dados hist√≥ricos: {e}")
        return None

# --- Parte 4: C√°lculo de indicadores t√©cnicos ---
def calcular_indicadores(precos_historicos):
    try:
        media_movel = talib.SMA(precos_historicos, timeperiod=5)
        rsi = talib.RSI(precos_historicos, timeperiod=14)
        print(f"M√©dia M√≥vel: {media_movel[-10:] if media_movel is not None else 'Erro ao calcular M√©dia M√≥vel'}")
        print(f"RSI: {rsi[-10:] if rsi is not None else 'Erro ao calcular RSI'}")
        return media_movel, rsi
    except Exception as e:
        print(f"Erro ao calcular indicadores: {e}")
        return None, None

# --- Parte 5: Gera√ß√£o do gr√°fico ---
def gerar_grafico(precos_historicos, media_movel):
    plt.figure(figsize=(10, 5))
    plt.plot(precos_historicos, label='Pre√ßos Hist√≥ricos', marker='o')
    if media_movel is not None:
        plt.plot(media_movel, label='M√©dia M√≥vel', linestyle='--', marker='x')
    plt.title("Hist√≥rico de Pre√ßos e M√©dia M√≥vel (dados reais)")
    plt.xlabel("Per√≠odo")
    plt.ylabel("Pre√ßo (USDT)")
    plt.legend()
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    return buf

# --- Parte 6: Gera√ß√£o do sinal de trading ---
def gerar_sinal(preco_atual, media_movel, rsi):
    sinal = "NEUTRO"
    if media_movel is not None and rsi is not None:
        print(f"Pre√ßo Atual: {preco_atual}, √öltima M√©dia M√≥vel: {media_movel[-1]}, √öltimo RSI: {rsi[-1]}")
        if preco_atual > media_movel[-1] and rsi[-1] < 40:  # Flexibilizado
            sinal = "COMPRA"
        elif preco_atual < media_movel[-1] and rsi[-1] > 60:  # Flexibilizado
            sinal = "VENDA"
    else:
        print("Erro: M√©dia M√≥vel ou RSI n√£o dispon√≠veis para c√°lculo do sinal.")
    return sinal

# --- Parte 7: Envio do sinal e gr√°fico para o Telegram ---
async def enviar_sinal_telegram(sinal, preco_atual, precos_historicos, media_movel, rsi, saldo):
    try:
        bot = Bot(token=TOKEN_TELEGRAM)
        
        # Organizando as informa√ß√µes
        mensagem = (
            f"üöÄ **Sinal de Trading** üöÄ\n\n"
            f"**Sinal:** {sinal}\n"
            f"**Pre√ßo Atual:** {preco_atual:.2f} USDT\n"
            f"**Saldo da Carteira:** {saldo:.4f} SOL\n\n"
            f"**Indicadores T√©cnicos:**\n"
            f"- M√©dia M√≥vel (√öltima): {media_movel[-1]:.2f}\n"
            f"- RSI (√öltimo): {rsi[-1]:.2f}\n\n"
            f"üìä **Dados Hist√≥ricos:**\n"
            f"√öltimos 5 Pre√ßos:\n"
            f"{', '.join([f'{preco:.2f}' for preco in precos_historicos[-5:]])}\n\n"
            f"#Solana #Crypto"
        )
        
        # Gerando o gr√°fico
        grafico = gerar_grafico(precos_historicos, media_movel)
        
        # Enviando o gr√°fico com as informa√ß√µes organizadas
        await bot.send_photo(chat_id=CHAT_ID, photo=grafico, caption=mensagem, parse_mode="Markdown")
        print("Sinal, saldo, indicadores e gr√°fico enviados para o Telegram.")
    except Exception as e:
        print(f"Erro ao enviar mensagem no Telegram: {e}")


# --- Parte 8: Execu√ß√£o de ordens reais na Binance ---
def configurar_exchange():
    try:
        exchange = ccxt.binance({
            "apiKey": API_KEY,
            "secret": API_SECRET,
            "enableRateLimit": True
        })
        print("Exchange configurada com sucesso.")
        return exchange
    except Exception as e:
        print(f"Erro ao configurar a exchange: {e}")
        return None

def executar_trade_real(exchange, sinal, preco):
    try:
        if sinal == "COMPRA":
            ordem = exchange.create_market_buy_order(BINANCE_SYMBOL, QUANTIDADE_OPERAR)
            print(f"Ordem de COMPRA executada: {ordem}")
        elif sinal == "VENDA":
            ordem = exchange.create_market_sell_order(BINANCE_SYMBOL, QUANTIDADE_OPERAR)
            print(f"Ordem de VENDA executada: {ordem}")
        else:
            print("Nenhuma a√ß√£o tomada, sinal neutro.")
    except Exception as e:
        print(f"Erro ao executar ordem real: {e}")

# --- Monitoramento cont√≠nuo em tempo real ---
async def monitorar_precos():
    exchange = configurar_exchange()
    if exchange is None:
        print("Erro na configura√ß√£o da exchange. N√£o ser√° poss√≠vel executar ordens reais.")
        return

    while True:
        saldo = verificar_saldo(wallet_address)
        if saldo is None:
            print("Erro ao verificar saldo da carteira Solana.")
            continue

        precos_historicos = obter_dados_historicos()
        if precos_historicos is None:
            print("Erro ao obter dados hist√≥ricos.")
            continue

        media_movel, rsi = calcular_indicadores(precos_historicos)
        if media_movel is None or rsi is None:
            print("Erro ao calcular indicadores t√©cnicos.")
            continue

        preco_atual = obter_preco_em_tempo_real()
        if preco_atual is None:
            print("Erro ao obter pre√ßo atual.")
            continue

        sinal = gerar_sinal(preco_atual, media_movel, rsi)
        print(f"SINAL GERADO: {sinal} | Pre√ßo Atual: {preco_atual} USDT | Saldo: {saldo:.4f} SOL")

        # Corrigindo a chamada da fun√ß√£o com todos os par√¢metros necess√°rios
        await enviar_sinal_telegram(sinal, preco_atual, precos_historicos, media_movel, rsi, saldo)

        executar_trade_real(exchange, sinal, preco_atual)

        await asyncio.sleep(60)


# --- Execu√ß√£o Principal ---
if __name__ == "__main__":
    asyncio.run(monitorar_precos())
